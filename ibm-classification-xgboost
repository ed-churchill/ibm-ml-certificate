{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7804ecee",
   "metadata": {
    "papermill": {
     "duration": 0.005666,
     "end_time": "2024-05-08T10:50:52.705140",
     "exception": false,
     "start_time": "2024-05-08T10:50:52.699474",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "11b01298",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:50:52.716984Z",
     "iopub.status.busy": "2024-05-08T10:50:52.716610Z",
     "iopub.status.idle": "2024-05-08T10:50:53.650909Z",
     "shell.execute_reply": "2024-05-08T10:50:53.649970Z"
    },
    "papermill": {
     "duration": 0.94327,
     "end_time": "2024-05-08T10:50:53.653478",
     "exception": false,
     "start_time": "2024-05-08T10:50:52.710208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79e1a2bb",
   "metadata": {
    "papermill": {
     "duration": 0.005781,
     "end_time": "2024-05-08T10:50:53.664915",
     "exception": false,
     "start_time": "2024-05-08T10:50:53.659134",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77997240",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:50:53.676822Z",
     "iopub.status.busy": "2024-05-08T10:50:53.676328Z",
     "iopub.status.idle": "2024-05-08T10:51:27.378125Z",
     "shell.execute_reply": "2024-05-08T10:51:27.377310Z"
    },
    "papermill": {
     "duration": 33.710425,
     "end_time": "2024-05-08T10:51:27.380480",
     "exception": false,
     "start_time": "2024-05-08T10:50:53.670055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = pd.read_csv(\"/kaggle/input/ibm-classification-feature-selection/X_train_normalized.csv\", index_col=[0])\n",
    "X_test = pd.read_csv(\"/kaggle/input/ibm-classification-feature-selection/X_test_normalized.csv\", index_col=[0])\n",
    "y_train = pd.read_csv(\"/kaggle/input/ibm-classification-feature-selection/y_train.csv\", index_col=[0])\n",
    "y_test = pd.read_csv(\"/kaggle/input/ibm-classification-feature-selection/y_test.csv\", index_col=[0]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b49d5fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:27.392291Z",
     "iopub.status.busy": "2024-05-08T10:51:27.391955Z",
     "iopub.status.idle": "2024-05-08T10:51:27.419074Z",
     "shell.execute_reply": "2024-05-08T10:51:27.418024Z"
    },
    "papermill": {
     "duration": 0.035836,
     "end_time": "2024-05-08T10:51:27.421620",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.385784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Unemployment Rate (%)</th>\n",
       "      <th>Monthly Average Mortgage Rate (%)</th>\n",
       "      <th>Corporate Bond Yield</th>\n",
       "      <th>Quarterly GDP Growth Rate (%)</th>\n",
       "      <th>Home Price Index</th>\n",
       "      <th>Sector_Basic Materials</th>\n",
       "      <th>...</th>\n",
       "      <th>Adj Close 7-Day std</th>\n",
       "      <th>Volume 7-Day std</th>\n",
       "      <th>Distance to Adj Close 7-Day Upper Bollinger Band</th>\n",
       "      <th>Distance to Adj Close 7-Day Lower Bollinger Band</th>\n",
       "      <th>True Range</th>\n",
       "      <th>MACD</th>\n",
       "      <th>MACD Histogram</th>\n",
       "      <th>MACD-V</th>\n",
       "      <th>MACD-V Histogram</th>\n",
       "      <th>Stochastic Oscillator %K</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.286535</td>\n",
       "      <td>-0.383355</td>\n",
       "      <td>0.497834</td>\n",
       "      <td>-1.239088</td>\n",
       "      <td>0.560375</td>\n",
       "      <td>0.584924</td>\n",
       "      <td>1.117521</td>\n",
       "      <td>0.307606</td>\n",
       "      <td>-1.256557</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.298140</td>\n",
       "      <td>0.117466</td>\n",
       "      <td>0.236149</td>\n",
       "      <td>-0.269833</td>\n",
       "      <td>-0.179460</td>\n",
       "      <td>0.072447</td>\n",
       "      <td>0.039464</td>\n",
       "      <td>0.014854</td>\n",
       "      <td>0.039632</td>\n",
       "      <td>0.703087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.761917</td>\n",
       "      <td>-0.302460</td>\n",
       "      <td>-0.255973</td>\n",
       "      <td>-1.239088</td>\n",
       "      <td>0.560375</td>\n",
       "      <td>0.584924</td>\n",
       "      <td>1.117521</td>\n",
       "      <td>0.307606</td>\n",
       "      <td>-1.256557</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.233517</td>\n",
       "      <td>-0.211044</td>\n",
       "      <td>0.243391</td>\n",
       "      <td>-0.149424</td>\n",
       "      <td>0.885117</td>\n",
       "      <td>0.151975</td>\n",
       "      <td>0.161407</td>\n",
       "      <td>-0.052661</td>\n",
       "      <td>0.081329</td>\n",
       "      <td>1.417437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.407246</td>\n",
       "      <td>-0.278162</td>\n",
       "      <td>-0.224129</td>\n",
       "      <td>-1.239088</td>\n",
       "      <td>0.560375</td>\n",
       "      <td>0.584924</td>\n",
       "      <td>1.117521</td>\n",
       "      <td>0.307606</td>\n",
       "      <td>-1.256557</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.351999</td>\n",
       "      <td>-0.236571</td>\n",
       "      <td>0.252801</td>\n",
       "      <td>-0.346142</td>\n",
       "      <td>-0.162364</td>\n",
       "      <td>0.013708</td>\n",
       "      <td>-0.023140</td>\n",
       "      <td>-0.053078</td>\n",
       "      <td>-0.030982</td>\n",
       "      <td>0.567310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.181385</td>\n",
       "      <td>-0.466305</td>\n",
       "      <td>-0.074461</td>\n",
       "      <td>-1.239088</td>\n",
       "      <td>0.560375</td>\n",
       "      <td>0.584924</td>\n",
       "      <td>1.117521</td>\n",
       "      <td>0.307606</td>\n",
       "      <td>-1.256557</td>\n",
       "      <td>4.736778</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.314629</td>\n",
       "      <td>0.840247</td>\n",
       "      <td>0.234477</td>\n",
       "      <td>-0.300371</td>\n",
       "      <td>-0.561522</td>\n",
       "      <td>0.112365</td>\n",
       "      <td>0.184630</td>\n",
       "      <td>0.335596</td>\n",
       "      <td>0.463963</td>\n",
       "      <td>1.074077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.063162</td>\n",
       "      <td>-0.245769</td>\n",
       "      <td>0.243767</td>\n",
       "      <td>-1.239088</td>\n",
       "      <td>0.560375</td>\n",
       "      <td>0.584924</td>\n",
       "      <td>1.117521</td>\n",
       "      <td>0.307606</td>\n",
       "      <td>-1.256557</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.167583</td>\n",
       "      <td>0.314758</td>\n",
       "      <td>0.004186</td>\n",
       "      <td>-0.287913</td>\n",
       "      <td>0.373985</td>\n",
       "      <td>-0.345611</td>\n",
       "      <td>-0.232172</td>\n",
       "      <td>-0.343499</td>\n",
       "      <td>-0.162136</td>\n",
       "      <td>-1.813621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 120 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Symbol  Adj Close    Volume    S&P500  Unemployment Rate (%)  \\\n",
       "0  1.286535  -0.383355  0.497834 -1.239088               0.560375   \n",
       "1  0.761917  -0.302460 -0.255973 -1.239088               0.560375   \n",
       "2  0.407246  -0.278162 -0.224129 -1.239088               0.560375   \n",
       "3 -1.181385  -0.466305 -0.074461 -1.239088               0.560375   \n",
       "4 -1.063162  -0.245769  0.243767 -1.239088               0.560375   \n",
       "\n",
       "   Monthly Average Mortgage Rate (%)  Corporate Bond Yield  \\\n",
       "0                           0.584924              1.117521   \n",
       "1                           0.584924              1.117521   \n",
       "2                           0.584924              1.117521   \n",
       "3                           0.584924              1.117521   \n",
       "4                           0.584924              1.117521   \n",
       "\n",
       "   Quarterly GDP Growth Rate (%)  Home Price Index  Sector_Basic Materials  \\\n",
       "0                       0.307606         -1.256557               -0.211114   \n",
       "1                       0.307606         -1.256557               -0.211114   \n",
       "2                       0.307606         -1.256557               -0.211114   \n",
       "3                       0.307606         -1.256557                4.736778   \n",
       "4                       0.307606         -1.256557               -0.211114   \n",
       "\n",
       "   ...  Adj Close 7-Day std  Volume 7-Day std  \\\n",
       "0  ...            -0.298140          0.117466   \n",
       "1  ...            -0.233517         -0.211044   \n",
       "2  ...            -0.351999         -0.236571   \n",
       "3  ...            -0.314629          0.840247   \n",
       "4  ...            -0.167583          0.314758   \n",
       "\n",
       "   Distance to Adj Close 7-Day Upper Bollinger Band  \\\n",
       "0                                          0.236149   \n",
       "1                                          0.243391   \n",
       "2                                          0.252801   \n",
       "3                                          0.234477   \n",
       "4                                          0.004186   \n",
       "\n",
       "   Distance to Adj Close 7-Day Lower Bollinger Band  True Range      MACD  \\\n",
       "0                                         -0.269833   -0.179460  0.072447   \n",
       "1                                         -0.149424    0.885117  0.151975   \n",
       "2                                         -0.346142   -0.162364  0.013708   \n",
       "3                                         -0.300371   -0.561522  0.112365   \n",
       "4                                         -0.287913    0.373985 -0.345611   \n",
       "\n",
       "   MACD Histogram    MACD-V  MACD-V Histogram  Stochastic Oscillator %K  \n",
       "0        0.039464  0.014854          0.039632                  0.703087  \n",
       "1        0.161407 -0.052661          0.081329                  1.417437  \n",
       "2       -0.023140 -0.053078         -0.030982                  0.567310  \n",
       "3        0.184630  0.335596          0.463963                  1.074077  \n",
       "4       -0.232172 -0.343499         -0.162136                 -1.813621  \n",
       "\n",
       "[5 rows x 120 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3332099b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:27.434659Z",
     "iopub.status.busy": "2024-05-08T10:51:27.434335Z",
     "iopub.status.idle": "2024-05-08T10:51:27.456463Z",
     "shell.execute_reply": "2024-05-08T10:51:27.455443Z"
    },
    "papermill": {
     "duration": 0.031628,
     "end_time": "2024-05-08T10:51:27.459047",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.427419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Unemployment Rate (%)</th>\n",
       "      <th>Monthly Average Mortgage Rate (%)</th>\n",
       "      <th>Corporate Bond Yield</th>\n",
       "      <th>Quarterly GDP Growth Rate (%)</th>\n",
       "      <th>Home Price Index</th>\n",
       "      <th>Sector_Basic Materials</th>\n",
       "      <th>...</th>\n",
       "      <th>Adj Close 7-Day std</th>\n",
       "      <th>Volume 7-Day std</th>\n",
       "      <th>Distance to Adj Close 7-Day Upper Bollinger Band</th>\n",
       "      <th>Distance to Adj Close 7-Day Lower Bollinger Band</th>\n",
       "      <th>True Range</th>\n",
       "      <th>MACD</th>\n",
       "      <th>MACD Histogram</th>\n",
       "      <th>MACD-V</th>\n",
       "      <th>MACD-V Histogram</th>\n",
       "      <th>Stochastic Oscillator %K</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.206039</td>\n",
       "      <td>1.354258</td>\n",
       "      <td>-0.239400</td>\n",
       "      <td>2.512348</td>\n",
       "      <td>0.660965</td>\n",
       "      <td>-2.39954</td>\n",
       "      <td>-1.980584</td>\n",
       "      <td>0.463318</td>\n",
       "      <td>-1.894531</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>0.407697</td>\n",
       "      <td>-0.253133</td>\n",
       "      <td>-1.046621</td>\n",
       "      <td>-0.397982</td>\n",
       "      <td>1.822855</td>\n",
       "      <td>-1.005420</td>\n",
       "      <td>-0.094047</td>\n",
       "      <td>-0.448102</td>\n",
       "      <td>-0.054776</td>\n",
       "      <td>-1.373692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.486038</td>\n",
       "      <td>0.647982</td>\n",
       "      <td>-0.252503</td>\n",
       "      <td>2.512348</td>\n",
       "      <td>0.660965</td>\n",
       "      <td>-2.39954</td>\n",
       "      <td>-1.980584</td>\n",
       "      <td>0.463318</td>\n",
       "      <td>-1.894531</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>0.175892</td>\n",
       "      <td>-0.254727</td>\n",
       "      <td>-0.482394</td>\n",
       "      <td>-0.204397</td>\n",
       "      <td>-0.192842</td>\n",
       "      <td>0.110104</td>\n",
       "      <td>-0.359390</td>\n",
       "      <td>0.080089</td>\n",
       "      <td>-0.458811</td>\n",
       "      <td>-0.991576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.693712</td>\n",
       "      <td>-0.384946</td>\n",
       "      <td>-0.124013</td>\n",
       "      <td>2.512348</td>\n",
       "      <td>0.660965</td>\n",
       "      <td>-2.39954</td>\n",
       "      <td>-1.980584</td>\n",
       "      <td>0.463318</td>\n",
       "      <td>-1.894531</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.296192</td>\n",
       "      <td>-0.203749</td>\n",
       "      <td>0.161051</td>\n",
       "      <td>-0.346024</td>\n",
       "      <td>-0.244519</td>\n",
       "      <td>0.038039</td>\n",
       "      <td>-0.407160</td>\n",
       "      <td>-0.013546</td>\n",
       "      <td>-0.541751</td>\n",
       "      <td>-1.781038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.983587</td>\n",
       "      <td>-0.011212</td>\n",
       "      <td>-0.130146</td>\n",
       "      <td>2.512348</td>\n",
       "      <td>0.660965</td>\n",
       "      <td>-2.39954</td>\n",
       "      <td>-1.980584</td>\n",
       "      <td>0.463318</td>\n",
       "      <td>-1.894531</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.191586</td>\n",
       "      <td>-0.178147</td>\n",
       "      <td>0.173868</td>\n",
       "      <td>-0.149957</td>\n",
       "      <td>-0.289094</td>\n",
       "      <td>0.592527</td>\n",
       "      <td>-0.008127</td>\n",
       "      <td>0.766414</td>\n",
       "      <td>0.016781</td>\n",
       "      <td>0.774399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.203552</td>\n",
       "      <td>0.695478</td>\n",
       "      <td>-0.287889</td>\n",
       "      <td>2.512348</td>\n",
       "      <td>0.660965</td>\n",
       "      <td>-2.39954</td>\n",
       "      <td>-1.980584</td>\n",
       "      <td>0.463318</td>\n",
       "      <td>-1.894531</td>\n",
       "      <td>-0.211114</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.062149</td>\n",
       "      <td>-0.281473</td>\n",
       "      <td>-0.023190</td>\n",
       "      <td>-0.132996</td>\n",
       "      <td>0.022698</td>\n",
       "      <td>0.972511</td>\n",
       "      <td>-0.299918</td>\n",
       "      <td>0.757151</td>\n",
       "      <td>-0.223332</td>\n",
       "      <td>0.644914</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 120 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Symbol  Adj Close    Volume    S&P500  Unemployment Rate (%)  \\\n",
       "0 -0.206039   1.354258 -0.239400  2.512348               0.660965   \n",
       "1  1.486038   0.647982 -0.252503  2.512348               0.660965   \n",
       "2 -0.693712  -0.384946 -0.124013  2.512348               0.660965   \n",
       "3  0.983587  -0.011212 -0.130146  2.512348               0.660965   \n",
       "4 -1.203552   0.695478 -0.287889  2.512348               0.660965   \n",
       "\n",
       "   Monthly Average Mortgage Rate (%)  Corporate Bond Yield  \\\n",
       "0                           -2.39954             -1.980584   \n",
       "1                           -2.39954             -1.980584   \n",
       "2                           -2.39954             -1.980584   \n",
       "3                           -2.39954             -1.980584   \n",
       "4                           -2.39954             -1.980584   \n",
       "\n",
       "   Quarterly GDP Growth Rate (%)  Home Price Index  Sector_Basic Materials  \\\n",
       "0                       0.463318         -1.894531               -0.211114   \n",
       "1                       0.463318         -1.894531               -0.211114   \n",
       "2                       0.463318         -1.894531               -0.211114   \n",
       "3                       0.463318         -1.894531               -0.211114   \n",
       "4                       0.463318         -1.894531               -0.211114   \n",
       "\n",
       "   ...  Adj Close 7-Day std  Volume 7-Day std  \\\n",
       "0  ...             0.407697         -0.253133   \n",
       "1  ...             0.175892         -0.254727   \n",
       "2  ...            -0.296192         -0.203749   \n",
       "3  ...            -0.191586         -0.178147   \n",
       "4  ...            -0.062149         -0.281473   \n",
       "\n",
       "   Distance to Adj Close 7-Day Upper Bollinger Band  \\\n",
       "0                                         -1.046621   \n",
       "1                                         -0.482394   \n",
       "2                                          0.161051   \n",
       "3                                          0.173868   \n",
       "4                                         -0.023190   \n",
       "\n",
       "   Distance to Adj Close 7-Day Lower Bollinger Band  True Range      MACD  \\\n",
       "0                                         -0.397982    1.822855 -1.005420   \n",
       "1                                         -0.204397   -0.192842  0.110104   \n",
       "2                                         -0.346024   -0.244519  0.038039   \n",
       "3                                         -0.149957   -0.289094  0.592527   \n",
       "4                                         -0.132996    0.022698  0.972511   \n",
       "\n",
       "   MACD Histogram    MACD-V  MACD-V Histogram  Stochastic Oscillator %K  \n",
       "0       -0.094047 -0.448102         -0.054776                 -1.373692  \n",
       "1       -0.359390  0.080089         -0.458811                 -0.991576  \n",
       "2       -0.407160 -0.013546         -0.541751                 -1.781038  \n",
       "3       -0.008127  0.766414          0.016781                  0.774399  \n",
       "4       -0.299918  0.757151         -0.223332                  0.644914  \n",
       "\n",
       "[5 rows x 120 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c3f3e9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:27.472486Z",
     "iopub.status.busy": "2024-05-08T10:51:27.472143Z",
     "iopub.status.idle": "2024-05-08T10:51:27.481651Z",
     "shell.execute_reply": "2024-05-08T10:51:27.480644Z"
    },
    "papermill": {
     "duration": 0.018463,
     "end_time": "2024-05-08T10:51:27.483619",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.465156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2-week Forward Excess Return Sign</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   2-week Forward Excess Return Sign\n",
       "0                               -1.0\n",
       "1                                1.0\n",
       "2                               -1.0\n",
       "3                                1.0\n",
       "4                               -1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6edfae38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:27.497294Z",
     "iopub.status.busy": "2024-05-08T10:51:27.496937Z",
     "iopub.status.idle": "2024-05-08T10:51:27.505056Z",
     "shell.execute_reply": "2024-05-08T10:51:27.504208Z"
    },
    "papermill": {
     "duration": 0.01715,
     "end_time": "2024-05-08T10:51:27.506792",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.489642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2-week Forward Excess Return Sign</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   2-week Forward Excess Return Sign\n",
       "0                               -1.0\n",
       "1                               -1.0\n",
       "2                                1.0\n",
       "3                                1.0\n",
       "4                                1.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f59facd7",
   "metadata": {
    "papermill": {
     "duration": 0.0058,
     "end_time": "2024-05-08T10:51:27.519012",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.513212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fit XGBoost Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f949a8ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:27.534400Z",
     "iopub.status.busy": "2024-05-08T10:51:27.533209Z",
     "iopub.status.idle": "2024-05-08T10:51:28.857491Z",
     "shell.execute_reply": "2024-05-08T10:51:28.856495Z"
    },
    "papermill": {
     "duration": 1.333557,
     "end_time": "2024-05-08T10:51:28.859604",
     "exception": false,
     "start_time": "2024-05-08T10:51:27.526047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8b7ee468",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:28.872524Z",
     "iopub.status.busy": "2024-05-08T10:51:28.872223Z",
     "iopub.status.idle": "2024-05-08T10:51:28.883205Z",
     "shell.execute_reply": "2024-05-08T10:51:28.882109Z"
    },
    "papermill": {
     "duration": 0.019788,
     "end_time": "2024-05-08T10:51:28.885412",
     "exception": false,
     "start_time": "2024-05-08T10:51:28.865624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert labels (-1 and 1) to 0 and 1 which are required by xgboost\n",
    "y_train.replace(to_replace=-1, value=0, inplace=True)\n",
    "y_test.replace(to_replace=-1, value=0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bb605dc",
   "metadata": {
    "papermill": {
     "duration": 0.005501,
     "end_time": "2024-05-08T10:51:28.896848",
     "exception": false,
     "start_time": "2024-05-08T10:51:28.891347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Parameter Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f99d8fed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:28.911067Z",
     "iopub.status.busy": "2024-05-08T10:51:28.909895Z",
     "iopub.status.idle": "2024-05-08T10:51:28.917189Z",
     "shell.execute_reply": "2024-05-08T10:51:28.916276Z"
    },
    "papermill": {
     "duration": 0.016629,
     "end_time": "2024-05-08T10:51:28.919139",
     "exception": false,
     "start_time": "2024-05-08T10:51:28.902510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "def objective(trial, X_train, X_val, y_train, y_val):\n",
    "    \"\"\"Objective function returning accuracy score to be used in hyperparameter tuning\"\"\"\n",
    "    \n",
    "    # Parameters to optimize\n",
    "    params = {\n",
    "        'objective': 'binary:logistic',\n",
    "        'max_depth': trial.suggest_int('max_depth', 1, 2)\n",
    "    }\n",
    "    \n",
    "    # Fit model with these parameters\n",
    "    model = XGBClassifier(**params) \n",
    "    model.fit(\n",
    "        X_train,\n",
    "        y_train,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        verbose=250,\n",
    "        early_stopping_rounds=250\n",
    "    )\n",
    "    \n",
    "    # Predict\n",
    "    preds = model.predict(X_val)\n",
    "    \n",
    "    # Get accuracy score\n",
    "    accuracy = accuracy_score(preds, y_val)\n",
    "    \n",
    "    return accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0c2e7af6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:28.932443Z",
     "iopub.status.busy": "2024-05-08T10:51:28.932113Z",
     "iopub.status.idle": "2024-05-08T10:51:54.875716Z",
     "shell.execute_reply": "2024-05-08T10:51:54.874352Z"
    },
    "papermill": {
     "duration": 25.952878,
     "end_time": "2024-05-08T10:51:54.878139",
     "exception": false,
     "start_time": "2024-05-08T10:51:28.925261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-05-08 10:51:29,239] A new study created in memory with name: no-name-b9683bb8-12f8-4c59-acb3-3e5518989e3e\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-logloss:0.69514\n",
      "[99]\tvalidation_0-logloss:0.69740\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-05-08 10:51:54,870] Trial 0 finished with value: 0.4924981645446502 and parameters: {'max_depth': 1}. Best is trial 0 with value: 0.4924981645446502.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of finished trials: 1\n",
      "Best trial: {'max_depth': 1, 'objective': 'binary:logistic'}\n"
     ]
    }
   ],
   "source": [
    "# Create study\n",
    "import optuna\n",
    "study = optuna.create_study(direction='maximize')\n",
    "\n",
    "# Split data into training and validation for hyperparameter tuning\n",
    "X_train_optuna = X_train.iloc[:600000, :]\n",
    "X_val_optuna = X_train.iloc[600000:, :]\n",
    "y_train_optuna = y_train.iloc[:600000]\n",
    "y_val_optuna = y_train.iloc[600000:]\n",
    "\n",
    "# Optimize hyperparameters\n",
    "study.optimize(\n",
    "    lambda trial: objective(\n",
    "        trial, \n",
    "        X_train=X_train_optuna, \n",
    "        X_val= X_val_optuna,\n",
    "        y_train=y_train_optuna,\n",
    "        y_val=y_val_optuna\n",
    "    ), \n",
    "    n_trials=1\n",
    ")\n",
    "\n",
    "# Get best parameters\n",
    "best_params = study.best_trial.params\n",
    "\n",
    "# Add fixed params that aren't stored in optuna's best params object\n",
    "best_params['objective'] = 'binary:logistic'\n",
    "\n",
    "# Print and save best parameters\n",
    "import pickle\n",
    "with open('best_params.pkl', 'wb') as f:\n",
    "    pickle.dump(best_params, f)\n",
    "print('Number of finished trials:', len(study.trials))\n",
    "print('Best trial:', best_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35c9f496",
   "metadata": {
    "papermill": {
     "duration": 0.005889,
     "end_time": "2024-05-08T10:51:54.890662",
     "exception": false,
     "start_time": "2024-05-08T10:51:54.884773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Train Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1a76b9b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:51:54.905252Z",
     "iopub.status.busy": "2024-05-08T10:51:54.904861Z",
     "iopub.status.idle": "2024-05-08T10:52:12.536313Z",
     "shell.execute_reply": "2024-05-08T10:52:12.535449Z"
    },
    "papermill": {
     "duration": 17.640943,
     "end_time": "2024-05-08T10:52:12.537907",
     "exception": false,
     "start_time": "2024-05-08T10:51:54.896964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=1, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=1, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=1, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train model with best params\n",
    "xgb = XGBClassifier(**best_params)\n",
    "xgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0930c9ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:12.552485Z",
     "iopub.status.busy": "2024-05-08T10:52:12.552128Z",
     "iopub.status.idle": "2024-05-08T10:52:12.635095Z",
     "shell.execute_reply": "2024-05-08T10:52:12.634282Z"
    },
    "papermill": {
     "duration": 0.092735,
     "end_time": "2024-05-08T10:52:12.637238",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.544503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make predictions on test set\n",
    "y_pred = xgb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d349418a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:12.653502Z",
     "iopub.status.busy": "2024-05-08T10:52:12.653120Z",
     "iopub.status.idle": "2024-05-08T10:52:12.661057Z",
     "shell.execute_reply": "2024-05-08T10:52:12.660258Z"
    },
    "papermill": {
     "duration": 0.01821,
     "end_time": "2024-05-08T10:52:12.663174",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.644964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save model\n",
    "with open('xgb_model.pkl', 'wb') as f:\n",
    "    pickle.dump(xgb, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "712b2387",
   "metadata": {
    "papermill": {
     "duration": 0.006316,
     "end_time": "2024-05-08T10:52:12.676682",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.670366",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Results Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a686ebca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:12.691286Z",
     "iopub.status.busy": "2024-05-08T10:52:12.690909Z",
     "iopub.status.idle": "2024-05-08T10:52:12.696373Z",
     "shell.execute_reply": "2024-05-08T10:52:12.695096Z"
    },
    "papermill": {
     "duration": 0.015001,
     "end_time": "2024-05-08T10:52:12.698261",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.683260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Imports needed for accuracy checks\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, accuracy_score, roc_auc_score, roc_curve"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e69ceaa",
   "metadata": {
    "papermill": {
     "duration": 0.006198,
     "end_time": "2024-05-08T10:52:12.711269",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.705071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Confusion Matrix\n",
    "The confusion matrix shows us how our predicted labels compare to our actual labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7288e011",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:12.726398Z",
     "iopub.status.busy": "2024-05-08T10:52:12.725553Z",
     "iopub.status.idle": "2024-05-08T10:52:13.060499Z",
     "shell.execute_reply": "2024-05-08T10:52:13.059580Z"
    },
    "papermill": {
     "duration": 0.344489,
     "end_time": "2024-05-08T10:52:13.062265",
     "exception": false,
     "start_time": "2024-05-08T10:52:12.717776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x791c6330bf40>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=xgb.classes_)\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01e00040",
   "metadata": {
    "papermill": {
     "duration": 0.006378,
     "end_time": "2024-05-08T10:52:13.075655",
     "exception": false,
     "start_time": "2024-05-08T10:52:13.069277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Accuracy, Precision, Recall, F1-Score\n",
    "* **Accuracy**: Measure of how good the classifier is at predicting correctly. It's simply the number of predictions the classifier got right divided by the total number of predicitions it made. In the confusion, matrix, it's the sum of the leading diagonal divided by the sum of the whole matrix.\n",
    "\n",
    "* **Precision**: For a given class, this measures how good the classifier is at not incorrectly labelling something as the class. For the given class, it's simply the number of predictions that were correctly labelled as that class divided by the total number of predictions that were labelled with that class.\n",
    "\n",
    "* **Recall**: For a given class, this measures how good the classifier is at correctly labelling something as that class. For the given class, it's simply the number of predictions that were correctly labelled as that class divided by the total number of actual instances of that class.\n",
    "\n",
    "* **F1-Score**: For a given class, this is a weighted harmonic mean of precision and recall where each are given equal importance. The best F1-score is 1 and the worst is 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "52d10d70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:13.090668Z",
     "iopub.status.busy": "2024-05-08T10:52:13.090313Z",
     "iopub.status.idle": "2024-05-08T10:52:13.113139Z",
     "shell.execute_reply": "2024-05-08T10:52:13.111802Z"
    },
    "papermill": {
     "duration": 0.033638,
     "end_time": "2024-05-08T10:52:13.115850",
     "exception": false,
     "start_time": "2024-05-08T10:52:13.082212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy is 0.49421543078259494\n"
     ]
    }
   ],
   "source": [
    "# Accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy is {accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "37ef3446",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T10:52:13.132821Z",
     "iopub.status.busy": "2024-05-08T10:52:13.132382Z",
     "iopub.status.idle": "2024-05-08T10:52:13.423065Z",
     "shell.execute_reply": "2024-05-08T10:52:13.422218Z"
    },
    "papermill": {
     "duration": 0.301431,
     "end_time": "2024-05-08T10:52:13.424961",
     "exception": false,
     "start_time": "2024-05-08T10:52:13.123530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0      0.483     0.321     0.385     75130\n",
      "         1.0      0.500     0.664     0.570     76826\n",
      "\n",
      "    accuracy                          0.494    151956\n",
      "   macro avg      0.491     0.492     0.478    151956\n",
      "weighted avg      0.491     0.494     0.479    151956\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification report showing precision, recall and F1 score for each class, as well accuracy and some averages\n",
    "cr = classification_report(y_test, y_pred, digits=3)\n",
    "print(cr)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "sourceId": 174900197,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 83.806826,
   "end_time": "2024-05-08T10:52:14.053508",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-08T10:50:50.246682",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
